[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\vital\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\vital\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 56.774ms
[debug]       Load.loadUnit: defsScala took 0.2306ms
[debug] [Loading] Scanning directory C:\Users\vital\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vital\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.4081 ms
[debug]           Load.resolveProject(global-plugins) took 28.3329ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\vital\.sbt\1.0\plugins, plugins: List(<none>))) took 52.5992ms
[debug] [Loading] Done in C:\Users\vital\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 65.1891ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1802ms
[debug]     Load.loadUnit(file:/C:/Users/vital/.sbt/1.0/plugins/, ...) took 128.3131ms
[debug]   Load.apply: load took 243.1205ms
[debug]   Load.apply: resolveProjects took 3.5716ms
[debug]   Load.apply: finalTransforms took 37.6922ms
[debug]   Load.apply: config.delegates took 4.9373ms
[debug]   Load.apply: Def.make(settings)... took 327.149ms
[debug]   Load.apply: structureIndex took 91.1211ms
[debug]   Load.apply: mkStreams took 2.4624ms
[info] loading global plugins from C:\Users\vital\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1830.3154ms
[debug]           Load.loadUnit: plugins took 20.4753ms
[debug]           Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory B:\Scala\Search for duplicates\project
[debug]             Load.loadUnit: mkEval took 3.4183ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in B:\Scala\Search for duplicates\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3131 ms
[info] loading settings for project search-for-duplicates-build from idea.sbt ...
[debug]               Load.resolveProject(search-for-duplicates-build) took 8.4961ms
[debug]             Load.loadTransitive: finalizeProject(Project(id search-for-duplicates-build, base: B:\Scala\Search for duplicates\project, plugins: List(<none>))) took 10.2286ms
[debug] [Loading] Done in B:\Scala\Search for duplicates\project, returning: (search-for-duplicates-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 84.7207ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.6134ms
[debug]         Load.loadUnit(file:/B:/Scala/Search%20for%20duplicates/project/, ...) took 109.4275ms
[debug]       Load.apply: load took 110.6928ms
[debug]       Load.apply: resolveProjects took 0.0895ms
[debug]       Load.apply: finalTransforms took 6.2939ms
[debug]       Load.apply: config.delegates took 0.4042ms
[debug]       Load.apply: Def.make(settings)... took 50.4731ms
[debug]       Load.apply: structureIndex took 24.4326ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from B:\Scala\Search for duplicates\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 367.7583ms
[debug]     Load.loadUnit: defsScala took 0.0018ms
[debug] [Loading] Scanning directory B:\Scala\Search for duplicates
[debug]       Load.loadUnit: mkEval took 0.1598ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in B:\Scala\Search for duplicates, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5291 ms
[info] loading settings for project search-for-duplicates from build.sbt ...
[debug]         Load.resolveProject(search-for-duplicates) took 17.6582ms
[debug]       Load.loadTransitive: finalizeProject(Project(id search-for-duplicates, base: B:\Scala\Search for duplicates, plugins: List(<none>))) took 20.9644ms
[debug] [Loading] Done in B:\Scala\Search for duplicates, returning: (search-for-duplicates)
[debug]     Load.loadUnit: loadedProjectsRaw took 46.6452ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.967ms
[debug]   Load.loadUnit(file:/B:/Scala/Search%20for%20duplicates/, ...) took 419.9485ms
[debug] Load.apply: load took 421.2619ms
[debug] Load.apply: resolveProjects took 0.1013ms
[debug] Load.apply: finalTransforms took 15.8084ms
[debug] Load.apply: config.delegates took 0.3207ms
[debug] Load.apply: Def.make(settings)... took 45.8345ms
[debug] Load.apply: structureIndex took 24.157ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to 1 (in build file:/B:/Scala/Search%20for%20duplicates/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53497 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53497, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to 1 (in build file:/B:/Scala/Search%20for%20duplicates/)
[debug] > Exec(idea-shell, None, None)
